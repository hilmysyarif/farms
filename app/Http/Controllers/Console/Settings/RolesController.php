<?php

namespace App\Http\Controllers\Console\Settings;

/**
 * Generated by RTKit.
 */

use App\Http\Controllers\Console\ConsoleController;
use App\Http\Controllers\Front\FrontController;
use App\Models\Permission;
use App\Models\Role;
use Illuminate\Http\Request;

class RolesController extends ConsoleController
{
    public function __construct(){
        parent::__construct();
        $this->tabs = [
            [
                'url' => url('/roles'),
                'name' => '角色管理'
            ],
            [
                'url' => url('/roles/add'),
                'name' => '添加角色'
            ],
        ];
    }

    public function index($currentPage = 1) {
        $pagesCount = ceil(Role::count() / 10);
        $pages = FrontController::pages('/roles', $pagesCount, $currentPage);
        $list = Role::fetchBlock($currentPage);

        return view('console.roles_list', [
            'list' => $list,
            'tabs' => $this->tabs,
            'pages' => $pages,
            'active' => 0
        ]);
    }

    public function add(Request $request) {

        if ($request->isMethod('post')) {
            $role = new Role();
            $role->store($request);

            $permissions = $request->permissions;
            foreach ($permissions as $k => $v) {
                $permissions[$k] = [
                    'id' => $v
                ];
            }
            $role->attachPermissions($permissions);
            return redirect('/roles');
        }

        $permissions = Permission::get();
        return view('console.roles_add', [
            'tabs' => $this->tabs,
            'active' => 1,
            'permissions' => $permissions
        ]);
    }

    public function edit(Request $request, $id) {

        if ($request->isMethod('post')) {
            $data = [
                'name' => $request->name,
                'display_name' => $request->display_name,
                'description' => $request->description
            ];
            Role::updateOne($id, $data);
            return redirect('/roles');
        }
        
        $row = Role::find($id);

        $assignedPermissions = $row->permissionRole();
        foreach ($assignedPermissions as $assigned) {
            dump($assigned->permission_id);
        }
        dump($assignedPermissions);
        $permissions = Permission::get();
        foreach ($permissions as $key => $permission) {
            $permissions[$key]->checked = false;
            foreach ($assignedPermissions as $assigned) {
                if ($permission->id == $assigned->id) {
                    $permissions[$key]->checked = true;
                    break;
                }
            }
        }
        dump($permissions);
        return view('console.roles_edit', [
            'tabs' => $this->tabs,
            'active' => 1,
            'row' => $row,
            'permissions' => $permissions
        ]);
    }


    public function remove($id) {
        Role::destroy($id);
        return redirect(url('/roles'));
    }
}
